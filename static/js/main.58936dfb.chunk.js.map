{"version":3,"sources":["componets/card.js","componets/Titel.js","App.js","serviceWorker.js","index.js"],"names":["Card","state","count","addCount","setState","props","click","myContry","this","myImage","onClick","src","className","alt","React","Component","Titel","name","MyApp","contryName","contry","imageContry","map","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAEaA,G,MAAb,4MAEIC,MAAM,CACFC,MAAM,GAHd,EAMIC,SAAS,WACL,EAAKC,SAAS,CAACF,MAAM,EAAKD,MAAMC,MAAO,IACvC,EAAKG,MAAMC,MAAM,EAAKD,MAAME,WARpC,uDAUa,IACEA,EAAUC,KAAKH,MAAfE,SACDE,EAASD,KAAKH,MAAdI,QACN,OACA,6BACA,4BAAKD,KAAKP,MAAMC,MAAhB,YAAgCK,GAChC,4BAAQG,QAASF,KAAKL,UAAtB,WACA,6BACA,yBAAKQ,IAAKF,EAASG,UAAU,cAAcC,IAAI,qBAlBvD,GAA0BC,IAAMC,YCAzB,SAASC,EAAT,GAAuB,IAAPC,EAAM,EAANA,KAEf,OACA,6BACI,wCAAcA,I,ICALC,E,kDAGnB,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAMRC,MAAM,SAACW,GACL,EAAKb,SAAS,CAACe,WAAWF,KAN1B,EAAKhB,MAAM,CACTkB,WAAW,UAHG,E,qDAWT,IAAD,OAWN,OACE,yBAAKP,UAAU,OACb,kBAACI,EAAD,CAAOC,KAAMT,KAAKP,MAAMkB,aAXhB,CACV,CAACC,OAAO,SAAUC,YAAY,8EAC9B,CAACD,OAAO,MAAOC,YAAY,sJAC3B,CAACD,OAAO,SAAUC,YAAY,qHAUrBC,KAAI,SAACC,GACV,OAAO,kBAAC,EAAD,CAAMhB,SAAUgB,EAAKH,OAAQX,QAASc,EAAKF,YAAaf,MAAO,EAAKA,WAG7E,kBAAC,EAAD,CAAMA,MAAOE,KAAKF,MAAOC,SAAS,SAASE,QAAQ,oF,GAjCxBK,IAAMC,WCMrBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.58936dfb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport class Card extends React.Component{\r\n\r\n    state={\r\n        count:0\r\n    };\r\n\r\n    addCount=()=>{\r\n        this.setState({count:this.state.count +1});\r\n        this.props.click(this.props.myContry);\r\n    }\r\n    render(){\r\n        const {myContry}=this.props;\r\n        const{myImage}=this.props;\r\n        return(\r\n        <div>\r\n        <h1>{this.state.count} tims in {myContry}</h1>\r\n        <button onClick={this.addCount}>add one</button>\r\n        <br/>\r\n        <img src={myImage} className=\"contryImage\" alt=\"this contry\"/>\r\n        </div>\r\n            );\r\n    }\r\n}","import React from 'react'\r\n\r\nexport function Titel({name}){\r\n\r\n        return(\r\n        <div>\r\n            <h1>click in {name}</h1>\r\n        </div>\r\n            );\r\n    }\r\n\r\n\r\n/*export class Titel extends React.Component{\r\n\r\n    render(){\r\n        const {name}=this.props;\r\n        return(\r\n        <div>\r\n            <h1>click in {name}</h1>\r\n        </div>\r\n            );\r\n    }\r\n}*/","import React from 'react';\nimport './App.css';\nimport {Card} from './componets/card';\nimport {Titel} from './componets/Titel';\n\n\nexport default class MyApp extends React.Component\n{\n  //הסטייט הגדול \n  constructor(props){\n    super(props);\n    this.state={\n      contryName:\"______\"\n    };\n  }\n//לחיצה\n  click=(name)=>{\n    this.setState({contryName:name});\n  }\n//לרנדר את הדף\n  render(){\n    //מערך עם כל הפריטים\n    const cards=[\n      {contry:\"israel\", imageContry:'https://www.touristisrael.com/wp-content/uploads/Explore-Israel-Header.jpg'},\n      {contry:\"USA\", imageContry:\"https://www.visittheusa.com/sites/default/files/styles/hero_l_x2/public/2016-10/About_the_USA_NYC_Statue_Liberty_._CROP_Web72DPI.jpg?itok=qMzUafYO\"},\n      {contry:\"france\", imageContry:'https://static01.tjt.co.il/sites/www.totallyjewishtravel.com/files/tcoreimg/3cf9cee16a70d5268ff26adcb11cb8bb.jpg'}\n    ];\n\n//הראשון זה פריט של כותרת\n//השני זה לולאה שעוברת על כל המערך\n//שיטה רגילה להוסיף פריט\n    return (\n      <div className=\"App\">\n        <Titel name={this.state.contryName}/>\n\n        {cards.map((item)=>{\n          return <Card myContry={item.contry} myImage={item.imageContry} click={this.click}/>\n        })}\n\n        <Card click={this.click} myContry=\"israel\" myImage='https://www.touristisrael.com/wp-content/uploads/Explore-Israel-Header.jpg'/>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}